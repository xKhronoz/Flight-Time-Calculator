name: Promote to Production (Manual)

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Git ref (branch, tag, or commit SHA) to deploy'
        required: true
        default: 'main'

jobs:
  verify_preview:
    runs-on: ubuntu-latest
    steps:
      - name: Require successful preview-deploy status
        uses: actions/github-script@v7
        with:
          script: |
            const ref = core.getInput('ref') || '${{ github.event.inputs.ref }}';
            const { owner, repo } = context.repo;
            // Get the commit SHA for the ref
            const { data: refData } = await github.rest.repos.getCommit({
              owner, repo, ref
            });
            const sha = refData.sha;
            const { data: statuses } = await github.rest.repos.listCommitStatusesForRef({
              owner, repo, ref: sha
            });
            const ok = statuses.some(s => s.context === 'preview-deploy' && s.state === 'success');
            if (!ok) {
              core.setFailed('Required status check failed: preview-deploy (Preview must succeed before promotion).');
            }

  promote:
    needs: [verify_preview]
    runs-on: ubuntu-latest
    environment: production  # <-- requires approval if you set reviewers on the production environment
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
      DIRECT_URL: ${{ secrets.PRODUCTION_DIRECT_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run Prisma migrations (prod)
        run: npx prisma migrate deploy

      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Pull Vercel Environment Info (Production)
        run: vercel pull --yes --environment=production --token $VERCEL_TOKEN

      - name: Build (prebuilt artifacts)
        run: vercel build --prod --token $VERCEL_TOKEN

      - name: Deploy to Production
        run: vercel deploy --prebuilt --prod --token $VERCEL_TOKEN
